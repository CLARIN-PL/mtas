/* Generated By:JavaCC: Do not edit this line. MtasCQLParser.java */
package mtas.parser.cql;
import mtas.analysis.token.MtasToken;
import mtas.parser.cql.util.MtasCQLParserGroupCondition;
import mtas.parser.cql.util.MtasCQLParserGroupFullCondition;
import mtas.parser.cql.util.MtasCQLParserWordCondition;
import mtas.parser.cql.util.MtasCQLParserWordPositionQuery;
import mtas.parser.cql.util.MtasCQLParserWordFullCondition;
import mtas.parser.cql.util.MtasCQLParserBasicSentenceCondition;
import mtas.parser.cql.util.MtasCQLParserSentenceCondition;
import mtas.parser.cql.util.MtasCQLParserSentencePartCondition;
import mtas.parser.cql.util.MtasCQLParserGroupQuery;
import mtas.parser.cql.util.MtasCQLParserWordQuery;
import mtas.parser.cql.util.MtasCQLParserDefaultPrefixCondition;
import org.apache.lucene.index.Term;
import mtas.search.spans.util.MtasSpanQuery;
import mtas.search.spans.MtasSpanContainingQuery;
import mtas.search.spans.MtasSpanWithinQuery;
import mtas.search.spans.MtasSpanIntersectingQuery;
import mtas.search.spans.MtasSpanNotQuery;
import mtas.search.spans.MtasSpanSequenceItem;
import mtas.search.spans.MtasSpanSequenceQuery;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class MtasCQLParser implements MtasCQLParserConstants {
  public MtasSpanQuery parse(String field, String defaultPrefix, HashMap<String, String[] > variables, MtasSpanQuery ignore, Integer maximumIgnoreLength) throws ParseException
  {
    HashSet<String> usedVariables = new HashSet<String>();
    MtasSpanQuery query = cql(field, defaultPrefix, variables, usedVariables, ignore, maximumIgnoreLength);
    if(variables!=null && variables.size() > usedVariables.size()) {
      for(String key : variables.keySet()) {
        if(!usedVariables.contains(key)) {
          throw new ParseException("variable $"+key+" not used");
        }
      }
      throw new ParseException("unused variables defined");
    }
    return query;
  }

  private String unquoteString(String unfiltered)
  {
    if (unfiltered.startsWith("\u005c"") && unfiltered.endsWith("\u005c""))
    {
      unfiltered = unfiltered.substring(1, unfiltered.length());
      unfiltered = unfiltered.substring(0, unfiltered.length() - 1);
    }
    return unfiltered;
  }

  private String variableString(String variable)
  {
    if (variable.startsWith("$"))
    {
      variable = variable.substring(1, variable.length());
    }
    return variable;
  }

  final private MtasSpanQuery cql(String field, String defaultPrefix, HashMap<String, String[] > variables, HashSet<String > usedVariables, MtasSpanQuery ignore, Integer maximumIgnoreLength) throws ParseException, ParseException {
  MtasSpanSequenceItem si;
  ArrayList < MtasSpanSequenceItem > itemList = new ArrayList < MtasSpanSequenceItem > ();
    si = cqlBlock(field, defaultPrefix, variables, usedVariables, ignore, maximumIgnoreLength);
    itemList.add(si);
    label_1:
    while (true) {
      if (jj_2_1(1000)) {
        ;
      } else {
        break label_1;
      }
      si = cqlBlock(field, defaultPrefix, variables, usedVariables, ignore, maximumIgnoreLength);
      itemList.add(si);
    }
    jj_consume_token(0);
    if (itemList.size() > 1)
    {
      {if (true) return new MtasSpanSequenceQuery(itemList, ignore, maximumIgnoreLength);}
    }
    else
    {
      {if (true) return itemList.get(0).getQuery();}
    }
    throw new Error("Missing return statement in function");
  }

  final private MtasSpanSequenceItem cqlBlock(String field, String defaultPrefix, HashMap<String, String[] > variables, HashSet<String > usedVariables, MtasSpanQuery ignore,Integer maximumIgnoreLength) throws ParseException, ParseException {
  MtasCQLParserSentenceCondition sc1 = null, sc2 = null;
  MtasSpanSequenceItem si1 = null, si2=null;
  ArrayList < MtasSpanSequenceItem > itemList1 = new ArrayList < MtasSpanSequenceItem > ();
  ArrayList < MtasSpanSequenceItem > itemList2 = new ArrayList < MtasSpanSequenceItem > ();
  MtasSpanQuery q1 = null, q2 = null;
  Token end = null;
  String operator = null;
  String OPERATOR_CONTAINING = "containing";
  String OPERATOR_NOT_CONTAINING = "not_containing";
  String OPERATOR_WITHIN = "within";
  String OPERATOR_NOT_WITHIN = "not_within";
  String OPERATOR_INTERSECTING = "intersecting";
  String OPERATOR_NOT_INTERSECTING = "not_intersecting";
    if (jj_2_3(1000)) {
      sc1 = sentence(field, defaultPrefix, variables, usedVariables, ignore, maximumIgnoreLength);
    } else if (jj_2_4(1000)) {
      jj_consume_token(BRACKET_START);
      si1 = cqlBlock(field, defaultPrefix, variables, usedVariables, ignore, maximumIgnoreLength);
        itemList1.add(si1);
      label_2:
      while (true) {
        if (jj_2_2(1000)) {
          ;
        } else {
          break label_2;
        }
        si1 = cqlBlock(field, defaultPrefix, variables, usedVariables, ignore, maximumIgnoreLength);
          itemList1.add(si1);
      }
      jj_consume_token(BRACKET_END);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_14(1000)) {
      if (jj_2_5(1000)) {
        jj_consume_token(CONTAINING);
        operator = OPERATOR_CONTAINING;
      } else if (jj_2_6(1000)) {
        jj_consume_token(NOT_CONTAINING);
        operator = OPERATOR_NOT_CONTAINING;
      } else if (jj_2_7(1000)) {
        jj_consume_token(WITHIN);
        operator = OPERATOR_WITHIN;
      } else if (jj_2_8(1000)) {
        jj_consume_token(NOT_WITHIN);
        operator = OPERATOR_NOT_WITHIN;
      } else if (jj_2_9(1000)) {
        jj_consume_token(INTERSECTING);
        operator = OPERATOR_INTERSECTING;
      } else if (jj_2_10(1000)) {
        jj_consume_token(NOT_INTERSECTING);
        operator = OPERATOR_NOT_INTERSECTING;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_12(1000)) {
        sc2 = sentence(field, defaultPrefix, variables, usedVariables, ignore, maximumIgnoreLength);
      } else if (jj_2_13(1000)) {
        jj_consume_token(BRACKET_START);
        si2 = cqlBlock(field, defaultPrefix, variables, usedVariables, ignore, maximumIgnoreLength);
        itemList2.add(si2);
        label_3:
        while (true) {
          if (jj_2_11(1000)) {
            ;
          } else {
            break label_3;
          }
          si2 = cqlBlock(field, defaultPrefix, variables, usedVariables, ignore, maximumIgnoreLength);
          itemList2.add(si2);
        }
        jj_consume_token(BRACKET_END);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    if (sc1 != null)
    {
      si1 = new MtasSpanSequenceItem(sc1.getQuery(),sc1.isOptional());
    } else if(itemList1.size()==1) {
      si1 = itemList1.get(0);
    } else {
      MtasSpanQuery q = new MtasSpanSequenceQuery(itemList1, ignore, maximumIgnoreLength);
      si1 = new MtasSpanSequenceItem(q, false);
    }
    if (operator != null)
    {
      if (sc2 != null)
      {
        si2 = new MtasSpanSequenceItem(sc2.getQuery(),sc2.isOptional());
      } else if(itemList2.size()==1) {
        si2 = itemList2.get(0);
      } else {
        MtasSpanQuery q = new MtasSpanSequenceQuery(itemList2, ignore, maximumIgnoreLength);
        si2 = new MtasSpanSequenceItem(q, false);
      }
      if (operator.equals(OPERATOR_CONTAINING))
      {
        MtasSpanQuery q = new MtasSpanContainingQuery(si1.getQuery(), si2.getQuery());
        {if (true) return new MtasSpanSequenceItem(q, si1.isOptional());}
      }
      else if (operator.equals(OPERATOR_NOT_CONTAINING))
      {
        MtasSpanQuery q = new MtasSpanNotQuery(si1.getQuery(), new MtasSpanContainingQuery(si1.getQuery(), si2.getQuery()));
        {if (true) return new MtasSpanSequenceItem(q, si1.isOptional());}
      }
      else if (operator.equals(OPERATOR_WITHIN))
      {
        MtasSpanQuery q = new MtasSpanWithinQuery(si2.getQuery(), si1.getQuery());
        {if (true) return new MtasSpanSequenceItem(q, si1.isOptional());}
      }
      else if (operator.equals(OPERATOR_NOT_WITHIN))
      {
        MtasSpanQuery q = new MtasSpanNotQuery(si1.getQuery(), new MtasSpanWithinQuery(si2.getQuery(), si1.getQuery()));
        {if (true) return new MtasSpanSequenceItem(q, si1.isOptional());}
      }
      else if (operator.equals(OPERATOR_INTERSECTING))
      {
        MtasSpanQuery q = new MtasSpanIntersectingQuery(si1.getQuery(), si2.getQuery());
        {if (true) return new MtasSpanSequenceItem(q, si1.isOptional());}
      }
      else if (operator.equals(OPERATOR_NOT_INTERSECTING))
      {
        MtasSpanQuery q = new MtasSpanNotQuery(si1.getQuery(), new MtasSpanIntersectingQuery(si1.getQuery(), si2.getQuery()));
        {if (true) return new MtasSpanSequenceItem(q, si1.isOptional());}
      }
      else
      {
        {if (true) throw new ParseException("unexpected operator " + operator);}
      }
    }
    else
    {
      {if (true) return si1;}
    }
    throw new Error("Missing return statement in function");
  }

  final private MtasCQLParserSentenceCondition sentence(String field, String defaultPrefix, HashMap<String, String[] > variables, HashSet<String > usedVariables, MtasSpanQuery ignore, Integer maximumIgnoreLength) throws ParseException, ParseException {
  MtasCQLParserSentenceCondition sentenceCondition;
  MtasCQLParserSentencePartCondition condition;
  Token questionMark = null;
  Token minValue = null;
  Token maxValue = null;
  int minimumOccurence = 1;
  int maximumOccurence = 1;
    condition = sentencePart(field, defaultPrefix, variables, usedVariables, ignore, maximumIgnoreLength);
    sentenceCondition = condition.createFullSentence();
    {if (true) return sentenceCondition;}
    throw new Error("Missing return statement in function");
  }

  final private MtasCQLParserSentencePartCondition sentencePart(String field, String defaultPrefix, HashMap<String, String[] > variables, HashSet<String > usedVariables, MtasSpanQuery ignore, Integer maximumIgnoreLength) throws ParseException, ParseException {
  Token operator;
  MtasCQLParserSentencePartCondition condition, sentencePart;
  MtasCQLParserBasicSentenceCondition basicSentence;
  Token questionMark = null;
  Token minValue = null;
  Token maxValue = null;
  int minimumOccurence = 1;
  int maximumOccurence = 1;
    if (jj_2_19(1000)) {
      basicSentence = basicSentence(field, defaultPrefix, variables, usedVariables, ignore, maximumIgnoreLength);
      condition = new MtasCQLParserSentencePartCondition(basicSentence, ignore, maximumIgnoreLength);
    } else if (jj_2_20(1000)) {
      jj_consume_token(BRACKET_START);
      sentencePart = sentencePart(field, defaultPrefix, variables, usedVariables, ignore, maximumIgnoreLength);
      jj_consume_token(BRACKET_END);
      if (jj_2_18(1000)) {
          questionMark = null;
        if (jj_2_15(1000)) {
          jj_consume_token(CURLY_BRACKET_START);
          minValue = jj_consume_token(NUMBER);
          jj_consume_token(KOMMA);
          maxValue = jj_consume_token(NUMBER);
          jj_consume_token(CURLY_BRACKET_END);
        } else if (jj_2_16(1000)) {
          jj_consume_token(CURLY_BRACKET_START);
          minValue = jj_consume_token(NUMBER);
          jj_consume_token(CURLY_BRACKET_END);
        } else if (jj_2_17(1000)) {
          questionMark = jj_consume_token(QUESTION_MARK);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
        condition = new MtasCQLParserSentencePartCondition(sentencePart.createFullSentence(), ignore, maximumIgnoreLength);
        if (questionMark != null)
        {
          minimumOccurence = 0;
          maximumOccurence = 1;
        }
        else if (minValue != null)
        {
          minimumOccurence = Integer.parseInt(minValue.image);
          if (maxValue != null)
          {
            maximumOccurence = Integer.parseInt(maxValue.image);
          }
          else
          {
            maximumOccurence = minimumOccurence;
          }
        }
        condition.setFirstOccurence(minimumOccurence, maximumOccurence);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_22(1000)) {
      operator = null;
      if (jj_2_21(1000)) {
        operator = jj_consume_token(OR);
      } else {
        ;
      }
      sentencePart = sentencePart(field, defaultPrefix, variables, usedVariables, ignore, maximumIgnoreLength);
        if (operator == null)
        {
          condition.setOr(false);
        }
        else
        {
          condition.setOr(true);
        }
        condition.setSecondPart(sentencePart);
    } else {
      ;
    }
    {if (true) return condition;}
    throw new Error("Missing return statement in function");
  }

  final private MtasCQLParserBasicSentenceCondition basicSentence(String field, String defaultPrefix, HashMap<String, String[] > variables, HashSet<String > usedVariables, MtasSpanQuery ignore, Integer maximumIgnoreLength) throws ParseException, ParseException {
  MtasCQLParserWordFullCondition subWordCondition;
  MtasCQLParserGroupFullCondition subGroupCondition;
  MtasCQLParserBasicSentenceCondition condition = new MtasCQLParserBasicSentenceCondition(ignore, maximumIgnoreLength);
    if (jj_2_23(1000)) {
      subWordCondition = word(field, defaultPrefix, variables, usedVariables);
      condition.addWord(subWordCondition);
    } else if (jj_2_24(1000)) {
      subGroupCondition = group(field);
      condition.addGroup(subGroupCondition);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_4:
    while (true) {
      if (jj_2_25(1000)) {
        ;
      } else {
        break label_4;
      }
      if (jj_2_26(1000)) {
        subWordCondition = word(field, defaultPrefix, variables, usedVariables);
        condition.addWord(subWordCondition);
      } else if (jj_2_27(1000)) {
        subGroupCondition = group(field);
        condition.addGroup(subGroupCondition);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return condition;}
    throw new Error("Missing return statement in function");
  }

  final private MtasCQLParserGroupFullCondition group(String field) throws ParseException, ParseException {
  Token questionMark = null;
  MtasCQLParserGroupFullCondition groupCondition;
  MtasCQLParserGroupCondition condition;
  Boolean startGroup, endGroup;
  Token minValue = null;
  Token maxValue = null;
  Token slash = null;
  int minimumOccurence = 1;
  int maximumOccurence = 1;
    jj_consume_token(GROUP_START);
    if (jj_2_29(1000)) {
      condition = groupCondition(field);
      if (jj_2_28(1000)) {
        slash = jj_consume_token(SLASH);
      } else {
        ;
      }
      if (slash == null)
      {
        startGroup = true;
        endGroup = false;
      }
      else
      {
        startGroup = false;
        endGroup = false;
      }
    } else if (jj_2_30(1000)) {
      jj_consume_token(SLASH);
      condition = groupCondition(field);
      startGroup = false;
      endGroup = true;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GROUP_END);
    if (jj_2_34(1000)) {
      questionMark = null;
      if (jj_2_31(1000)) {
        jj_consume_token(CURLY_BRACKET_START);
        minValue = jj_consume_token(NUMBER);
        jj_consume_token(KOMMA);
        maxValue = jj_consume_token(NUMBER);
        jj_consume_token(CURLY_BRACKET_END);
      } else if (jj_2_32(1000)) {
        jj_consume_token(CURLY_BRACKET_START);
        minValue = jj_consume_token(NUMBER);
        jj_consume_token(CURLY_BRACKET_END);
      } else if (jj_2_33(1000)) {
        questionMark = jj_consume_token(QUESTION_MARK);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    if (startGroup)
    {
      groupCondition = new MtasCQLParserGroupFullCondition(condition, MtasCQLParserGroupFullCondition.GROUP_START);
    }
    else if (endGroup)
    {
      groupCondition = new MtasCQLParserGroupFullCondition(condition, MtasCQLParserGroupFullCondition.GROUP_END);
    }
    else
    {
      groupCondition = new MtasCQLParserGroupFullCondition(condition, MtasCQLParserGroupFullCondition.GROUP_FULL);
    }
    if (questionMark != null)
    {
      minimumOccurence = 0;
      maximumOccurence = 1;
    }
    else if (minValue != null)
    {
      minimumOccurence = Integer.parseInt(minValue.image);
      if (maxValue != null)
      {
        maximumOccurence = Integer.parseInt(maxValue.image);
      }
      else
      {
        maximumOccurence = minimumOccurence;
      }
    }
    groupCondition.setOccurence(minimumOccurence, maximumOccurence);
    {if (true) return groupCondition;}
    throw new Error("Missing return statement in function");
  }

  final private MtasCQLParserGroupCondition groupCondition(String field) throws ParseException, ParseException {
  Token prefix;
  Token value = null;
    if (jj_2_35(1000)) {
      prefix = jj_consume_token(UNQUOTED_VALUE);
      jj_consume_token(TOKEN_EQUALS);
      value = jj_consume_token(QUOTED_VALUE);
    } else if (jj_2_36(1000)) {
      prefix = jj_consume_token(UNQUOTED_VALUE);
      value = null;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (value != null)
    {
      MtasSpanQuery q = new MtasCQLParserGroupQuery(field, prefix.image, unquoteString(value.image));
      MtasCQLParserGroupCondition condition = new MtasCQLParserGroupCondition(field, q);
      {if (true) return condition;}
    }
    else
    {
      MtasSpanQuery q = new MtasCQLParserGroupQuery(field, prefix.image, null);
      MtasCQLParserGroupCondition condition = new MtasCQLParserGroupCondition(field, q);
      {if (true) return condition;}
    }
    throw new Error("Missing return statement in function");
  }

  final private MtasCQLParserWordFullCondition word(String field, String defaultPrefix, HashMap<String, String[] > variables, HashSet<String > usedVariables) throws ParseException, ParseException {
  Token questionMark = null;
  Token value;
  MtasCQLParserWordFullCondition wordCondition;
  MtasCQLParserWordCondition condition, subCondition;
  Token minValue = null;
  Token maxValue = null;
  int minimumOccurence = 1;
  int maximumOccurence = 1;
    if (jj_2_43(1000)) {
      value = jj_consume_token(QUOTED_VALUE);
      condition = new MtasCQLParserDefaultPrefixCondition(field, defaultPrefix, unquoteString(value.image), variables, usedVariables);
    } else if (jj_2_44(1000)) {
      jj_consume_token(WORD_START);
      if (jj_2_41(1000)) {
        subCondition = wordCondition(field, variables, usedVariables);
        if (jj_2_39(1000)) {
          jj_consume_token(AND);
          condition = new MtasCQLParserWordCondition(field, MtasCQLParserWordCondition.TYPE_AND);
          condition.addCondition(subCondition);
          subCondition = wordCondition(field, variables, usedVariables);
          condition.addCondition(subCondition);
          label_5:
          while (true) {
            if (jj_2_37(1000)) {
              ;
            } else {
              break label_5;
            }
            jj_consume_token(AND);
            subCondition = wordCondition(field, variables, usedVariables);
            condition.addCondition(subCondition);
          }
        } else if (jj_2_40(1000)) {
          jj_consume_token(OR);
          condition = new MtasCQLParserWordCondition(field, MtasCQLParserWordCondition.TYPE_OR);
          condition.addCondition(subCondition);
          subCondition = wordCondition(field, variables, usedVariables);
          condition.addCondition(subCondition);
          label_6:
          while (true) {
            if (jj_2_38(1000)) {
              ;
            } else {
              break label_6;
            }
            jj_consume_token(OR);
            subCondition = wordCondition(field, variables, usedVariables);
            condition.addCondition(subCondition);
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else if (jj_2_42(1000)) {
        condition = wordCondition(field, variables, usedVariables);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(WORD_END);
    } else if (jj_2_45(1000)) {
      condition = new MtasCQLParserWordCondition(field, MtasCQLParserWordCondition.TYPE_AND);
      jj_consume_token(WORD_START);
      jj_consume_token(WORD_END);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_49(1000)) {
      questionMark = null;
      if (jj_2_46(1000)) {
        jj_consume_token(CURLY_BRACKET_START);
        minValue = jj_consume_token(NUMBER);
        jj_consume_token(KOMMA);
        maxValue = jj_consume_token(NUMBER);
        jj_consume_token(CURLY_BRACKET_END);
      } else if (jj_2_47(1000)) {
        jj_consume_token(CURLY_BRACKET_START);
        minValue = jj_consume_token(NUMBER);
        jj_consume_token(CURLY_BRACKET_END);
      } else if (jj_2_48(1000)) {
        questionMark = jj_consume_token(QUESTION_MARK);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    condition.simplify();
    wordCondition = new MtasCQLParserWordFullCondition(condition);
    if (questionMark != null)
    {
      minimumOccurence = 0;
      maximumOccurence = 1;
    }
    else if (minValue != null)
    {
      minimumOccurence = Integer.parseInt(minValue.image);
      if (maxValue != null)
      {
        maximumOccurence = Integer.parseInt(maxValue.image);
      }
      else
      {
        maximumOccurence = minimumOccurence;
      }
    }
    wordCondition.setOccurence(minimumOccurence, maximumOccurence);
    //System.out.println(wordCondition + "\n");
    {if (true) return wordCondition;}
    throw new Error("Missing return statement in function");
  }

  final private MtasCQLParserWordCondition wordCondition(String field, HashMap<String, String[] > variables, HashSet<String > usedVariables) throws ParseException, ParseException {
  Token negation = null;
  MtasCQLParserWordCondition condition, subCondition;
    if (jj_2_70(1000)) {
      if (jj_2_50(1000)) {
        negation = jj_consume_token(NEGATION);
      } else {
        ;
      }
      jj_consume_token(BRACKET_START);
      if (jj_2_67(1000)) {
        condition = new MtasCQLParserWordCondition(field, MtasCQLParserWordCondition.TYPE_AND);
        if (jj_2_51(1000)) {
          subCondition = wordAtomCondition(field, variables, usedVariables);
        } else if (jj_2_52(1000)) {
          subCondition = wordCondition(field, variables, usedVariables);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        condition.addCondition(subCondition);
        jj_consume_token(AND);
        if (jj_2_53(1000)) {
          subCondition = wordAtomCondition(field, variables, usedVariables);
        } else if (jj_2_54(1000)) {
          subCondition = wordCondition(field, variables, usedVariables);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        condition.addCondition(subCondition);
        label_7:
        while (true) {
          if (jj_2_55(1000)) {
            ;
          } else {
            break label_7;
          }
          jj_consume_token(AND);
          if (jj_2_56(1000)) {
            subCondition = wordAtomCondition(field, variables, usedVariables);
          } else if (jj_2_57(1000)) {
            subCondition = wordCondition(field, variables, usedVariables);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          condition.addCondition(subCondition);
        }
      } else if (jj_2_68(1000)) {
        condition = new MtasCQLParserWordCondition(field, MtasCQLParserWordCondition.TYPE_OR);
        if (jj_2_58(1000)) {
          subCondition = wordAtomCondition(field, variables, usedVariables);
        } else if (jj_2_59(1000)) {
          subCondition = wordCondition(field, variables, usedVariables);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        condition.addCondition(subCondition);
        jj_consume_token(OR);
        if (jj_2_60(1000)) {
          subCondition = wordAtomCondition(field, variables, usedVariables);
        } else if (jj_2_61(1000)) {
          subCondition = wordCondition(field, variables, usedVariables);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        condition.addCondition(subCondition);
        label_8:
        while (true) {
          if (jj_2_62(1000)) {
            ;
          } else {
            break label_8;
          }
          jj_consume_token(OR);
          if (jj_2_63(1000)) {
            subCondition = wordAtomCondition(field, variables, usedVariables);
          } else if (jj_2_64(1000)) {
            subCondition = wordCondition(field, variables, usedVariables);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          condition.addCondition(subCondition);
        }
      } else if (jj_2_69(1000)) {
        if (jj_2_65(1000)) {
          condition = wordAtomCondition(field, variables, usedVariables);
        } else if (jj_2_66(1000)) {
          condition = wordCondition(field, variables, usedVariables);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(BRACKET_END);
      if (negation != null)
      {
        condition.swapNot();
      }
      //System.out.println("=== wordCondition ===\n" + condition + "\n");
      {if (true) return condition;}
    } else if (jj_2_71(1000)) {
      //plain atom is a valid condition
          subCondition = wordAtomCondition(field, variables, usedVariables);
      //System.out.println("=== wordCondition ===\n" + subCondition + "\n");
      {if (true) return subCondition;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    //System.out.println("=== wordCondition ===\n" + condition + "\n");
    {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final private MtasCQLParserWordCondition wordAtomCondition(String field, HashMap<String, String[] > variables, HashSet<String > usedVariables) throws ParseException, ParseException {
  Token negation = null;
  Token nequals = null;
  Token prefix;
  Token value;
    if (jj_2_72(1000)) {
      negation = jj_consume_token(NEGATION);
    } else {
      ;
    }
    if (jj_2_79(1000)) {
      jj_consume_token(OCTOTHORPE);
      if (jj_2_73(1000)) {
        value = jj_consume_token(NUMBER);
      } else if (jj_2_74(1000)) {
        value = jj_consume_token(UNQUOTED_VALUE);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        Integer startPosition = null;
        Integer endPosition = null;
        Pattern range = Pattern.compile("([0-9]+)(\u005c\u005c-([0-9]+))?");
        Matcher m = range.matcher(value.image);
        if (m.find())
        {
          startPosition = m.group(1) != null ? Integer.parseInt(m.group(1)) : null;
          endPosition = m.group(3) != null ? Integer.parseInt(m.group(3)) : null;
        }
        else
        {
          {if (true) throw new ParseException("invalid range '" + value.image + "'");}
        }
        MtasCQLParserWordCondition condition = new MtasCQLParserWordCondition(field, MtasCQLParserWordCondition.TYPE_AND);
        if (startPosition != null && endPosition != null)
        {
          MtasSpanQuery q = new MtasCQLParserWordPositionQuery(field, startPosition, endPosition);
          condition.addPositiveQuery(q);
        }
        else if (startPosition != null)
        {
          MtasSpanQuery q = new MtasCQLParserWordPositionQuery(field, startPosition, startPosition);
          condition.addPositiveQuery(q);
        }
        else
        {
          //should not happen
          {if (true) throw new ParseException("invalid range");}
        }
        {if (true) return condition;}
    } else if (jj_2_80(1000)) {
      prefix = jj_consume_token(UNQUOTED_VALUE);
      if (jj_2_75(1000)) {
        nequals = jj_consume_token(TOKEN_NOTEQUALS);
      } else if (jj_2_76(1000)) {
        jj_consume_token(TOKEN_EQUALS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      value = jj_consume_token(VARIABLE);
        if (nequals != null)
        {
          //use RegexpQuery combined with SpanMultiTermQueryWrapper
          {if (true) throw new ParseException("TODO: not implemented '" + prefix.image + nequals.image + value.image + "'");}
        }
        else
        {
          MtasCQLParserWordCondition condition = new MtasCQLParserWordCondition(field, MtasCQLParserWordCondition.TYPE_OR);
          Term term = new Term(field, prefix.image + MtasToken.DELIMITER + value.image);
          MtasSpanQuery q = new MtasCQLParserWordQuery(field, prefix.image, variableString(value.image), MtasCQLParserWordQuery.MTAS_CQL_VARIABLE_QUERY, variables, usedVariables);
          if (negation != null)
          {
            condition.swapNot();
          }
          condition.addPositiveQuery(q);
          //System.out.println("=== wordAtomCondition ===\n" + condition + "\n");
          {if (true) return condition;}
        }
    } else if (jj_2_81(1000)) {
      prefix = jj_consume_token(UNQUOTED_VALUE);
      if (jj_2_77(1000)) {
        nequals = jj_consume_token(TOKEN_NOTEQUALS);
      } else if (jj_2_78(1000)) {
        jj_consume_token(TOKEN_EQUALS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      value = jj_consume_token(QUOTED_VALUE);
        if (nequals != null)
        {
          //use RegexpQuery combined with SpanMultiTermQueryWrapper
          {if (true) throw new ParseException("TODO: not implemented '" + prefix.image + nequals.image + value.image + "'");}
        }
        else
        {
          MtasCQLParserWordCondition condition = new MtasCQLParserWordCondition(field, MtasCQLParserWordCondition.TYPE_AND);
          Term term = new Term(field, prefix.image + MtasToken.DELIMITER + unquoteString(value.image));
          MtasSpanQuery q = new MtasCQLParserWordQuery(field, prefix.image, unquoteString(value.image), MtasCQLParserWordQuery.MTAS_CQL_REGEXP_QUERY, variables, usedVariables);
          if (negation != null)
          {
            condition.swapNot();
          }
          condition.addPositiveQuery(q);
          //System.out.println("=== wordAtomCondition ===\n" + condition + "\n");
          {if (true) return condition;}
        }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_3_29() {
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(GROUP_START)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    if (jj_scan_token(GROUP_END)) return true;
    xsp = jj_scanpos;
    if (jj_3_34()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_78() {
    if (jj_scan_token(TOKEN_EQUALS)) return true;
    return false;
  }

  private boolean jj_3_77() {
    if (jj_scan_token(TOKEN_NOTEQUALS)) return true;
    return false;
  }

  private boolean jj_3_81() {
    if (jj_scan_token(UNQUOTED_VALUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) return true;
    }
    if (jj_scan_token(QUOTED_VALUE)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(QUESTION_MARK)) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(CURLY_BRACKET_START)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(CURLY_BRACKET_END)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(CURLY_BRACKET_START)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(KOMMA)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(CURLY_BRACKET_END)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(BRACKET_START)) return true;
    if (jj_3R_9()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(BRACKET_END)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    return false;
  }

  private boolean jj_3_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_76() {
    if (jj_scan_token(TOKEN_EQUALS)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(NOT_INTERSECTING)) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_scan_token(TOKEN_NOTEQUALS)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(INTERSECTING)) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(WORD_START)) return true;
    if (jj_scan_token(WORD_END)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_80() {
    if (jj_scan_token(UNQUOTED_VALUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) return true;
    }
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(NOT_WITHIN)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(WITHIN)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(NOT_CONTAINING)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(CONTAINING)) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(BRACKET_START)) return true;
    if (jj_3R_9()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(BRACKET_END)) return true;
    return false;
  }

  private boolean jj_3_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    return false;
  }

  private boolean jj_3_74() {
    if (jj_scan_token(UNQUOTED_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(WORD_START)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    if (jj_scan_token(WORD_END)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(QUOTED_VALUE)) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_scan_token(OCTOTHORPE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3_74()) return true;
    }
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_49()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_scan_token(NEGATION)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_72()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) {
    jj_scanpos = xsp;
    if (jj_3_81()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(QUESTION_MARK)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(CURLY_BRACKET_START)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(CURLY_BRACKET_END)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(CURLY_BRACKET_START)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(KOMMA)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(CURLY_BRACKET_END)) return true;
    return false;
  }

  private boolean jj_3_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_71() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(BRACKET_START)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(BRACKET_END)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(UNQUOTED_VALUE)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(UNQUOTED_VALUE)) return true;
    if (jj_scan_token(TOKEN_EQUALS)) return true;
    if (jj_scan_token(QUOTED_VALUE)) return true;
    return false;
  }

  private boolean jj_3_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) return true;
    }
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_scan_token(OR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) return true;
    }
    return false;
  }

  private boolean jj_3_61() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) return true;
    }
    if (jj_scan_token(OR)) return true;
    xsp = jj_scanpos;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_62()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_57() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_scan_token(AND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) return true;
    }
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(QUESTION_MARK)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(CURLY_BRACKET_START)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(CURLY_BRACKET_END)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(CURLY_BRACKET_START)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(KOMMA)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(CURLY_BRACKET_END)) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) return true;
    }
    if (jj_scan_token(AND)) return true;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(NEGATION)) return true;
    return false;
  }

  private boolean jj_3_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) jj_scanpos = xsp;
    if (jj_scan_token(BRACKET_START)) return true;
    xsp = jj_scanpos;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) return true;
    }
    }
    if (jj_scan_token(BRACKET_END)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_70()) {
    jj_scanpos = xsp;
    if (jj_3_71()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public MtasCQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[81];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MtasCQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MtasCQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MtasCQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MtasCQLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MtasCQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MtasCQLParser(MtasCQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MtasCQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 81; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
